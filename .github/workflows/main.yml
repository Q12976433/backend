name: Deploy to AWS S3

on:
  push:
    branches:
      - dev
      
env:
  aws-region: us-east-2
  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  ECS_SERVICE: tmp-service              # set this to your Amazon ECS service name
  ECS_CLUSTER: fotopie-ecs               # set this to your Amazon ECS cluster name 1
  ECS_TASK_DEFINITION: .github/workflows/task1-definition1.json

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: '16.x'

      - name: Install dependencies
        run: npm install --legacy-peer-deps
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: fotopie
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . --build-arg JWT_ACTIVIATE_SECRET_KEY="5D5B5A527B9D65F70BF5843CCA8D0FD6023E1B2F2A31A244B67D7AACAE11111"
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
         # cat $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG



      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@de0132cf8cdedb79975c6d42b77eb7ea193cf28e
        with:
          task-definition: ${{ steps.task-def.outputs.task1 }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
